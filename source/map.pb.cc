// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

#include "map.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AreaData_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapAssets_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NpcData_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_map_2eproto;
namespace protobuf {
namespace mapdata {
class MapDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapData> _instance;
} _MapData_default_instance_;
class PositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Position> _instance;
} _Position_default_instance_;
class AreaDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AreaData> _instance;
} _AreaData_default_instance_;
class NpcDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NpcData> _instance;
} _NpcData_default_instance_;
class MapAssetsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapAssets> _instance;
} _MapAssets_default_instance_;
}  // namespace mapdata
}  // namespace protobuf
static void InitDefaultsscc_info_AreaData_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::mapdata::_AreaData_default_instance_;
    new (ptr) ::protobuf::mapdata::AreaData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::mapdata::AreaData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AreaData_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AreaData_map_2eproto}, {
      &scc_info_Position_map_2eproto.base,}};

static void InitDefaultsscc_info_MapAssets_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::mapdata::_MapAssets_default_instance_;
    new (ptr) ::protobuf::mapdata::MapAssets();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::mapdata::MapAssets::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapAssets_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MapAssets_map_2eproto}, {
      &scc_info_Position_map_2eproto.base,}};

static void InitDefaultsscc_info_MapData_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::mapdata::_MapData_default_instance_;
    new (ptr) ::protobuf::mapdata::MapData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::mapdata::MapData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MapData_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_MapData_map_2eproto}, {
      &scc_info_AreaData_map_2eproto.base,
      &scc_info_NpcData_map_2eproto.base,
      &scc_info_MapAssets_map_2eproto.base,
      &scc_info_Position_map_2eproto.base,}};

static void InitDefaultsscc_info_NpcData_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::mapdata::_NpcData_default_instance_;
    new (ptr) ::protobuf::mapdata::NpcData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::mapdata::NpcData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NpcData_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NpcData_map_2eproto}, {
      &scc_info_Position_map_2eproto.base,}};

static void InitDefaultsscc_info_Position_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::mapdata::_Position_default_instance_;
    new (ptr) ::protobuf::mapdata::Position();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::mapdata::Position::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Position_map_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_map_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_map_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_map_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_map_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::MapData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::MapData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::MapData, areadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::MapData, npcdata_),
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::MapData, mapassets_),
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::MapData, topleftedge_),
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::MapData, bottomrightedge_),
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::Position, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::Position, posx_),
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::Position, posy_),
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::Position, posz_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::AreaData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::AreaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::AreaData, areaid_),
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::AreaData, name_),
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::AreaData, type_),
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::AreaData, subarea_),
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::AreaData, areaposition_),
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::AreaData, donate_),
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::AreaData, akaname_),
  3,
  0,
  4,
  ~0u,
  2,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::NpcData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::NpcData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::NpcData, name_),
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::NpcData, position_),
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::NpcData, subareaid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::MapAssets, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::MapAssets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::MapAssets, type_),
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::MapAssets, topleft_),
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::MapAssets, filename_),
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::MapAssets, widthsquare_),
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::MapAssets, heightsquare_),
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::MapAssets, areaid_),
  PROTOBUF_FIELD_OFFSET(::protobuf::mapdata::MapAssets, scale_),
  2,
  1,
  0,
  3,
  4,
  5,
  6,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::protobuf::mapdata::MapData)},
  { 15, 23, sizeof(::protobuf::mapdata::Position)},
  { 26, 38, sizeof(::protobuf::mapdata::AreaData)},
  { 45, 53, sizeof(::protobuf::mapdata::NpcData)},
  { 56, 68, sizeof(::protobuf::mapdata::MapAssets)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::mapdata::_MapData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::mapdata::_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::mapdata::_AreaData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::mapdata::_NpcData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::mapdata::_MapAssets_default_instance_),
};

const char descriptor_table_protodef_map_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tmap.proto\022\020protobuf.mapdata\"\371\001\n\007MapDat"
  "a\022,\n\010areadata\030\001 \003(\0132\032.protobuf.mapdata.A"
  "reaData\022*\n\007npcdata\030\002 \003(\0132\031.protobuf.mapd"
  "ata.NpcData\022.\n\tmapassets\030\003 \003(\0132\033.protobu"
  "f.mapdata.MapAssets\022/\n\013topleftedge\030\004 \001(\013"
  "2\032.protobuf.mapdata.Position\0223\n\017bottomri"
  "ghtedge\030\005 \001(\0132\032.protobuf.mapdata.Positio"
  "n\"4\n\010Position\022\014\n\004posx\030\001 \001(\r\022\014\n\004posy\030\002 \001("
  "\r\022\014\n\004posz\030\003 \001(\r\"\361\001\n\010AreaData\022\016\n\006areaid\030\001"
  " \001(\r\022\014\n\004name\030\002 \001(\t\0221\n\004type\030\003 \001(\0162#.proto"
  "buf.mapdata.AreaData.AreaType\022\017\n\007subarea"
  "\030\004 \003(\r\0220\n\014areaposition\030\005 \001(\0132\032.protobuf."
  "mapdata.Position\022\016\n\006donate\030\006 \001(\010\022\017\n\007akan"
  "ame\030\007 \001(\t\"0\n\010AreaType\022\r\n\tUNDEFINED\020\000\022\010\n\004"
  "AREA\020\001\022\013\n\007SUBAREA\020\002\"X\n\007NpcData\022\014\n\004name\030\001"
  " \001(\t\022,\n\010position\030\002 \001(\0132\032.protobuf.mapdat"
  "a.Position\022\021\n\tsubareaid\030\003 \001(\r\"\201\002\n\tMapAss"
  "ets\0224\n\004type\030\001 \001(\0162&.protobuf.mapdata.Map"
  "Assets.AssetsType\022+\n\007topleft\030\002 \001(\0132\032.pro"
  "tobuf.mapdata.Position\022\020\n\010filename\030\003 \001(\t"
  "\022\023\n\013widthsquare\030\004 \001(\r\022\024\n\014heightsquare\030\005 "
  "\001(\r\022\016\n\006areaid\030\006 \001(\r\022\r\n\005scale\030\007 \001(\r\"5\n\nAs"
  "setsType\022\013\n\007SUBAREA\020\000\022\r\n\tSATELLITE\020\001\022\013\n\007"
  "MINIMAP\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_map_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_map_2eproto_sccs[5] = {
  &scc_info_AreaData_map_2eproto.base,
  &scc_info_MapAssets_map_2eproto.base,
  &scc_info_MapData_map_2eproto.base,
  &scc_info_NpcData_map_2eproto.base,
  &scc_info_Position_map_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_map_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_2eproto = {
  false, false, descriptor_table_protodef_map_2eproto, "map.proto", 929,
  &descriptor_table_map_2eproto_once, descriptor_table_map_2eproto_sccs, descriptor_table_map_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_map_2eproto::offsets,
  file_level_metadata_map_2eproto, 5, file_level_enum_descriptors_map_2eproto, file_level_service_descriptors_map_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_map_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_map_2eproto)), true);
namespace protobuf {
namespace mapdata {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AreaData_AreaType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_map_2eproto);
  return file_level_enum_descriptors_map_2eproto[0];
}
bool AreaData_AreaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AreaData_AreaType AreaData::UNDEFINED;
constexpr AreaData_AreaType AreaData::AREA;
constexpr AreaData_AreaType AreaData::SUBAREA;
constexpr AreaData_AreaType AreaData::AreaType_MIN;
constexpr AreaData_AreaType AreaData::AreaType_MAX;
constexpr int AreaData::AreaType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MapAssets_AssetsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_map_2eproto);
  return file_level_enum_descriptors_map_2eproto[1];
}
bool MapAssets_AssetsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MapAssets_AssetsType MapAssets::SUBAREA;
constexpr MapAssets_AssetsType MapAssets::SATELLITE;
constexpr MapAssets_AssetsType MapAssets::MINIMAP;
constexpr MapAssets_AssetsType MapAssets::AssetsType_MIN;
constexpr MapAssets_AssetsType MapAssets::AssetsType_MAX;
constexpr int MapAssets::AssetsType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void MapData::InitAsDefaultInstance() {
  ::protobuf::mapdata::_MapData_default_instance_._instance.get_mutable()->topleftedge_ = const_cast< ::protobuf::mapdata::Position*>(
      ::protobuf::mapdata::Position::internal_default_instance());
  ::protobuf::mapdata::_MapData_default_instance_._instance.get_mutable()->bottomrightedge_ = const_cast< ::protobuf::mapdata::Position*>(
      ::protobuf::mapdata::Position::internal_default_instance());
}
class MapData::_Internal {
 public:
  using HasBits = decltype(std::declval<MapData>()._has_bits_);
  static const ::protobuf::mapdata::Position& topleftedge(const MapData* msg);
  static void set_has_topleftedge(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf::mapdata::Position& bottomrightedge(const MapData* msg);
  static void set_has_bottomrightedge(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf::mapdata::Position&
MapData::_Internal::topleftedge(const MapData* msg) {
  return *msg->topleftedge_;
}
const ::protobuf::mapdata::Position&
MapData::_Internal::bottomrightedge(const MapData* msg) {
  return *msg->bottomrightedge_;
}
MapData::MapData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  areadata_(arena),
  npcdata_(arena),
  mapassets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.mapdata.MapData)
}
MapData::MapData(const MapData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      areadata_(from.areadata_),
      npcdata_(from.npcdata_),
      mapassets_(from.mapassets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_topleftedge()) {
    topleftedge_ = new ::protobuf::mapdata::Position(*from.topleftedge_);
  } else {
    topleftedge_ = nullptr;
  }
  if (from._internal_has_bottomrightedge()) {
    bottomrightedge_ = new ::protobuf::mapdata::Position(*from.bottomrightedge_);
  } else {
    bottomrightedge_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf.mapdata.MapData)
}

void MapData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapData_map_2eproto.base);
  ::memset(&topleftedge_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bottomrightedge_) -
      reinterpret_cast<char*>(&topleftedge_)) + sizeof(bottomrightedge_));
}

MapData::~MapData() {
  // @@protoc_insertion_point(destructor:protobuf.mapdata.MapData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MapData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete topleftedge_;
  if (this != internal_default_instance()) delete bottomrightedge_;
}

void MapData::ArenaDtor(void* object) {
  MapData* _this = reinterpret_cast< MapData* >(object);
  (void)_this;
}
void MapData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MapData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapData& MapData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapData_map_2eproto.base);
  return *internal_default_instance();
}


void MapData::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.mapdata.MapData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  areadata_.Clear();
  npcdata_.Clear();
  mapassets_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(topleftedge_ != nullptr);
      topleftedge_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bottomrightedge_ != nullptr);
      bottomrightedge_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .protobuf.mapdata.AreaData areadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_areadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protobuf.mapdata.NpcData npcdata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_npcdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protobuf.mapdata.MapAssets mapassets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mapassets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .protobuf.mapdata.Position topleftedge = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_topleftedge(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf.mapdata.Position bottomrightedge = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bottomrightedge(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.mapdata.MapData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protobuf.mapdata.AreaData areadata = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_areadata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_areadata(i), target, stream);
  }

  // repeated .protobuf.mapdata.NpcData npcdata = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_npcdata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_npcdata(i), target, stream);
  }

  // repeated .protobuf.mapdata.MapAssets mapassets = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mapassets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_mapassets(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .protobuf.mapdata.Position topleftedge = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::topleftedge(this), target, stream);
  }

  // optional .protobuf.mapdata.Position bottomrightedge = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::bottomrightedge(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.mapdata.MapData)
  return target;
}

size_t MapData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.mapdata.MapData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf.mapdata.AreaData areadata = 1;
  total_size += 1UL * this->_internal_areadata_size();
  for (const auto& msg : this->areadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf.mapdata.NpcData npcdata = 2;
  total_size += 1UL * this->_internal_npcdata_size();
  for (const auto& msg : this->npcdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf.mapdata.MapAssets mapassets = 3;
  total_size += 1UL * this->_internal_mapassets_size();
  for (const auto& msg : this->mapassets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protobuf.mapdata.Position topleftedge = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *topleftedge_);
    }

    // optional .protobuf.mapdata.Position bottomrightedge = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bottomrightedge_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.mapdata.MapData)
  GOOGLE_DCHECK_NE(&from, this);
  const MapData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.mapdata.MapData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.mapdata.MapData)
    MergeFrom(*source);
  }
}

void MapData::MergeFrom(const MapData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.mapdata.MapData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  areadata_.MergeFrom(from.areadata_);
  npcdata_.MergeFrom(from.npcdata_);
  mapassets_.MergeFrom(from.mapassets_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_topleftedge()->::protobuf::mapdata::Position::MergeFrom(from._internal_topleftedge());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bottomrightedge()->::protobuf::mapdata::Position::MergeFrom(from._internal_bottomrightedge());
    }
  }
}

void MapData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.mapdata.MapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapData::CopyFrom(const MapData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.mapdata.MapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapData::IsInitialized() const {
  return true;
}

void MapData::InternalSwap(MapData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  areadata_.InternalSwap(&other->areadata_);
  npcdata_.InternalSwap(&other->npcdata_);
  mapassets_.InternalSwap(&other->mapassets_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapData, bottomrightedge_)
      + sizeof(MapData::bottomrightedge_)
      - PROTOBUF_FIELD_OFFSET(MapData, topleftedge_)>(
          reinterpret_cast<char*>(&topleftedge_),
          reinterpret_cast<char*>(&other->topleftedge_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Position::InitAsDefaultInstance() {
}
class Position::_Internal {
 public:
  using HasBits = decltype(std::declval<Position>()._has_bits_);
  static void set_has_posx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_posy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_posz(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.mapdata.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&posx_, &from.posx_,
    static_cast<size_t>(reinterpret_cast<char*>(&posz_) -
    reinterpret_cast<char*>(&posx_)) + sizeof(posz_));
  // @@protoc_insertion_point(copy_constructor:protobuf.mapdata.Position)
}

void Position::SharedCtor() {
  ::memset(&posx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&posz_) -
      reinterpret_cast<char*>(&posx_)) + sizeof(posz_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:protobuf.mapdata.Position)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Position::ArenaDtor(void* object) {
  Position* _this = reinterpret_cast< Position* >(object);
  (void)_this;
}
void Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Position& Position::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Position_map_2eproto.base);
  return *internal_default_instance();
}


void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.mapdata.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&posx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&posz_) -
        reinterpret_cast<char*>(&posx_)) + sizeof(posz_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 posx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_posx(&has_bits);
          posx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 posy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_posy(&has_bits);
          posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 posz = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_posz(&has_bits);
          posz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.mapdata.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 posx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_posx(), target);
  }

  // optional uint32 posy = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_posy(), target);
  }

  // optional uint32 posz = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_posz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.mapdata.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.mapdata.Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 posx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_posx());
    }

    // optional uint32 posy = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_posy());
    }

    // optional uint32 posz = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_posz());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.mapdata.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.mapdata.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.mapdata.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.mapdata.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      posx_ = from.posx_;
    }
    if (cached_has_bits & 0x00000002u) {
      posy_ = from.posy_;
    }
    if (cached_has_bits & 0x00000004u) {
      posz_ = from.posz_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.mapdata.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.mapdata.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, posz_)
      + sizeof(Position::posz_)
      - PROTOBUF_FIELD_OFFSET(Position, posx_)>(
          reinterpret_cast<char*>(&posx_),
          reinterpret_cast<char*>(&other->posx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AreaData::InitAsDefaultInstance() {
  ::protobuf::mapdata::_AreaData_default_instance_._instance.get_mutable()->areaposition_ = const_cast< ::protobuf::mapdata::Position*>(
      ::protobuf::mapdata::Position::internal_default_instance());
}
class AreaData::_Internal {
 public:
  using HasBits = decltype(std::declval<AreaData>()._has_bits_);
  static void set_has_areaid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::protobuf::mapdata::Position& areaposition(const AreaData* msg);
  static void set_has_areaposition(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_donate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_akaname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf::mapdata::Position&
AreaData::_Internal::areaposition(const AreaData* msg) {
  return *msg->areaposition_;
}
AreaData::AreaData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  subarea_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.mapdata.AreaData)
}
AreaData::AreaData(const AreaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      subarea_(from.subarea_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  akaname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_akaname()) {
    akaname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_akaname(),
      GetArena());
  }
  if (from._internal_has_areaposition()) {
    areaposition_ = new ::protobuf::mapdata::Position(*from.areaposition_);
  } else {
    areaposition_ = nullptr;
  }
  ::memcpy(&areaid_, &from.areaid_,
    static_cast<size_t>(reinterpret_cast<char*>(&donate_) -
    reinterpret_cast<char*>(&areaid_)) + sizeof(donate_));
  // @@protoc_insertion_point(copy_constructor:protobuf.mapdata.AreaData)
}

void AreaData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AreaData_map_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  akaname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&areaposition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&donate_) -
      reinterpret_cast<char*>(&areaposition_)) + sizeof(donate_));
}

AreaData::~AreaData() {
  // @@protoc_insertion_point(destructor:protobuf.mapdata.AreaData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AreaData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  akaname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete areaposition_;
}

void AreaData::ArenaDtor(void* object) {
  AreaData* _this = reinterpret_cast< AreaData* >(object);
  (void)_this;
}
void AreaData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AreaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AreaData& AreaData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AreaData_map_2eproto.base);
  return *internal_default_instance();
}


void AreaData::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.mapdata.AreaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subarea_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      akaname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(areaposition_ != nullptr);
      areaposition_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&areaid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&donate_) -
        reinterpret_cast<char*>(&areaid_)) + sizeof(donate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AreaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 areaid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_areaid(&has_bits);
          areaid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.mapdata.AreaData.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf.mapdata.AreaData.AreaType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf::mapdata::AreaData_AreaType_IsValid(val))) {
            _internal_set_type(static_cast<::protobuf::mapdata::AreaData_AreaType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated uint32 subarea = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_subarea(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_subarea(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf.mapdata.Position areaposition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_areaposition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool donate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_donate(&has_bits);
          donate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string akaname = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_akaname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.mapdata.AreaData.akaname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AreaData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.mapdata.AreaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 areaid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_areaid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf.mapdata.AreaData.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional .protobuf.mapdata.AreaData.AreaType type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // repeated uint32 subarea = 4;
  for (int i = 0, n = this->_internal_subarea_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_subarea(i), target);
  }

  // optional .protobuf.mapdata.Position areaposition = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::areaposition(this), target, stream);
  }

  // optional bool donate = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_donate(), target);
  }

  // optional string akaname = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_akaname().data(), static_cast<int>(this->_internal_akaname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf.mapdata.AreaData.akaname");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_akaname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.mapdata.AreaData)
  return target;
}

size_t AreaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.mapdata.AreaData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 subarea = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->subarea_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_subarea_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string akaname = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_akaname());
    }

    // optional .protobuf.mapdata.Position areaposition = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *areaposition_);
    }

    // optional uint32 areaid = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_areaid());
    }

    // optional .protobuf.mapdata.AreaData.AreaType type = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional bool donate = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AreaData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.mapdata.AreaData)
  GOOGLE_DCHECK_NE(&from, this);
  const AreaData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AreaData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.mapdata.AreaData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.mapdata.AreaData)
    MergeFrom(*source);
  }
}

void AreaData::MergeFrom(const AreaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.mapdata.AreaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subarea_.MergeFrom(from.subarea_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_akaname(from._internal_akaname());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_areaposition()->::protobuf::mapdata::Position::MergeFrom(from._internal_areaposition());
    }
    if (cached_has_bits & 0x00000008u) {
      areaid_ = from.areaid_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      donate_ = from.donate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AreaData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.mapdata.AreaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AreaData::CopyFrom(const AreaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.mapdata.AreaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AreaData::IsInitialized() const {
  return true;
}

void AreaData::InternalSwap(AreaData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  subarea_.InternalSwap(&other->subarea_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  akaname_.Swap(&other->akaname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AreaData, donate_)
      + sizeof(AreaData::donate_)
      - PROTOBUF_FIELD_OFFSET(AreaData, areaposition_)>(
          reinterpret_cast<char*>(&areaposition_),
          reinterpret_cast<char*>(&other->areaposition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AreaData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NpcData::InitAsDefaultInstance() {
  ::protobuf::mapdata::_NpcData_default_instance_._instance.get_mutable()->position_ = const_cast< ::protobuf::mapdata::Position*>(
      ::protobuf::mapdata::Position::internal_default_instance());
}
class NpcData::_Internal {
 public:
  using HasBits = decltype(std::declval<NpcData>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf::mapdata::Position& position(const NpcData* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_subareaid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::protobuf::mapdata::Position&
NpcData::_Internal::position(const NpcData* msg) {
  return *msg->position_;
}
NpcData::NpcData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.mapdata.NpcData)
}
NpcData::NpcData(const NpcData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_position()) {
    position_ = new ::protobuf::mapdata::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  subareaid_ = from.subareaid_;
  // @@protoc_insertion_point(copy_constructor:protobuf.mapdata.NpcData)
}

void NpcData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NpcData_map_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subareaid_) -
      reinterpret_cast<char*>(&position_)) + sizeof(subareaid_));
}

NpcData::~NpcData() {
  // @@protoc_insertion_point(destructor:protobuf.mapdata.NpcData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NpcData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
}

void NpcData::ArenaDtor(void* object) {
  NpcData* _this = reinterpret_cast< NpcData* >(object);
  (void)_this;
}
void NpcData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NpcData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NpcData& NpcData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NpcData_map_2eproto.base);
  return *internal_default_instance();
}


void NpcData::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.mapdata.NpcData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
  }
  subareaid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NpcData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.mapdata.NpcData.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf.mapdata.Position position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 subareaid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_subareaid(&has_bits);
          subareaid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NpcData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.mapdata.NpcData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf.mapdata.NpcData.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .protobuf.mapdata.Position position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // optional uint32 subareaid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_subareaid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.mapdata.NpcData)
  return target;
}

size_t NpcData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.mapdata.NpcData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .protobuf.mapdata.Position position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional uint32 subareaid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_subareaid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NpcData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.mapdata.NpcData)
  GOOGLE_DCHECK_NE(&from, this);
  const NpcData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NpcData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.mapdata.NpcData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.mapdata.NpcData)
    MergeFrom(*source);
  }
}

void NpcData::MergeFrom(const NpcData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.mapdata.NpcData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_position()->::protobuf::mapdata::Position::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000004u) {
      subareaid_ = from.subareaid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NpcData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.mapdata.NpcData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpcData::CopyFrom(const NpcData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.mapdata.NpcData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcData::IsInitialized() const {
  return true;
}

void NpcData::InternalSwap(NpcData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NpcData, subareaid_)
      + sizeof(NpcData::subareaid_)
      - PROTOBUF_FIELD_OFFSET(NpcData, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NpcData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapAssets::InitAsDefaultInstance() {
  ::protobuf::mapdata::_MapAssets_default_instance_._instance.get_mutable()->topleft_ = const_cast< ::protobuf::mapdata::Position*>(
      ::protobuf::mapdata::Position::internal_default_instance());
}
class MapAssets::_Internal {
 public:
  using HasBits = decltype(std::declval<MapAssets>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::protobuf::mapdata::Position& topleft(const MapAssets* msg);
  static void set_has_topleft(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_widthsquare(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_heightsquare(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_areaid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::protobuf::mapdata::Position&
MapAssets::_Internal::topleft(const MapAssets* msg) {
  return *msg->topleft_;
}
MapAssets::MapAssets(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.mapdata.MapAssets)
}
MapAssets::MapAssets(const MapAssets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filename()) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filename(),
      GetArena());
  }
  if (from._internal_has_topleft()) {
    topleft_ = new ::protobuf::mapdata::Position(*from.topleft_);
  } else {
    topleft_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&type_)) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:protobuf.mapdata.MapAssets)
}

void MapAssets::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapAssets_map_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&topleft_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&topleft_)) + sizeof(scale_));
}

MapAssets::~MapAssets() {
  // @@protoc_insertion_point(destructor:protobuf.mapdata.MapAssets)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MapAssets::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete topleft_;
}

void MapAssets::ArenaDtor(void* object) {
  MapAssets* _this = reinterpret_cast< MapAssets* >(object);
  (void)_this;
}
void MapAssets::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MapAssets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapAssets& MapAssets::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapAssets_map_2eproto.base);
  return *internal_default_instance();
}


void MapAssets::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.mapdata.MapAssets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(topleft_ != nullptr);
      topleft_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scale_) -
        reinterpret_cast<char*>(&type_)) + sizeof(scale_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapAssets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protobuf.mapdata.MapAssets.AssetsType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf::mapdata::MapAssets_AssetsType_IsValid(val))) {
            _internal_set_type(static_cast<::protobuf::mapdata::MapAssets_AssetsType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .protobuf.mapdata.Position topleft = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_topleft(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string filename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.mapdata.MapAssets.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 widthsquare = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_widthsquare(&has_bits);
          widthsquare_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 heightsquare = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_heightsquare(&has_bits);
          heightsquare_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 areaid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_areaid(&has_bits);
          areaid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 scale = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapAssets::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.mapdata.MapAssets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf.mapdata.MapAssets.AssetsType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .protobuf.mapdata.Position topleft = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::topleft(this), target, stream);
  }

  // optional string filename = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf.mapdata.MapAssets.filename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_filename(), target);
  }

  // optional uint32 widthsquare = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_widthsquare(), target);
  }

  // optional uint32 heightsquare = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_heightsquare(), target);
  }

  // optional uint32 areaid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_areaid(), target);
  }

  // optional uint32 scale = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.mapdata.MapAssets)
  return target;
}

size_t MapAssets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.mapdata.MapAssets)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string filename = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional .protobuf.mapdata.Position topleft = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *topleft_);
    }

    // optional .protobuf.mapdata.MapAssets.AssetsType type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional uint32 widthsquare = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_widthsquare());
    }

    // optional uint32 heightsquare = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_heightsquare());
    }

    // optional uint32 areaid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_areaid());
    }

    // optional uint32 scale = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scale());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapAssets::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.mapdata.MapAssets)
  GOOGLE_DCHECK_NE(&from, this);
  const MapAssets* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapAssets>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.mapdata.MapAssets)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.mapdata.MapAssets)
    MergeFrom(*source);
  }
}

void MapAssets::MergeFrom(const MapAssets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.mapdata.MapAssets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_topleft()->::protobuf::mapdata::Position::MergeFrom(from._internal_topleft());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      widthsquare_ = from.widthsquare_;
    }
    if (cached_has_bits & 0x00000010u) {
      heightsquare_ = from.heightsquare_;
    }
    if (cached_has_bits & 0x00000020u) {
      areaid_ = from.areaid_;
    }
    if (cached_has_bits & 0x00000040u) {
      scale_ = from.scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MapAssets::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.mapdata.MapAssets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapAssets::CopyFrom(const MapAssets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.mapdata.MapAssets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapAssets::IsInitialized() const {
  return true;
}

void MapAssets::InternalSwap(MapAssets* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapAssets, scale_)
      + sizeof(MapAssets::scale_)
      - PROTOBUF_FIELD_OFFSET(MapAssets, topleft_)>(
          reinterpret_cast<char*>(&topleft_),
          reinterpret_cast<char*>(&other->topleft_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapAssets::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mapdata
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf::mapdata::MapData* Arena::CreateMaybeMessage< ::protobuf::mapdata::MapData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::mapdata::MapData >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::mapdata::Position* Arena::CreateMaybeMessage< ::protobuf::mapdata::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::mapdata::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::mapdata::AreaData* Arena::CreateMaybeMessage< ::protobuf::mapdata::AreaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::mapdata::AreaData >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::mapdata::NpcData* Arena::CreateMaybeMessage< ::protobuf::mapdata::NpcData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::mapdata::NpcData >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::mapdata::MapAssets* Arena::CreateMaybeMessage< ::protobuf::mapdata::MapAssets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::mapdata::MapAssets >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
