// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_map_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_map_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_map_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_map_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_2eproto;
namespace protobuf {
namespace mapdata {
class AreaData;
class AreaDataDefaultTypeInternal;
extern AreaDataDefaultTypeInternal _AreaData_default_instance_;
class MapAssets;
class MapAssetsDefaultTypeInternal;
extern MapAssetsDefaultTypeInternal _MapAssets_default_instance_;
class MapData;
class MapDataDefaultTypeInternal;
extern MapDataDefaultTypeInternal _MapData_default_instance_;
class NpcData;
class NpcDataDefaultTypeInternal;
extern NpcDataDefaultTypeInternal _NpcData_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
}  // namespace mapdata
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::protobuf::mapdata::AreaData* Arena::CreateMaybeMessage<::protobuf::mapdata::AreaData>(Arena*);
template<> ::protobuf::mapdata::MapAssets* Arena::CreateMaybeMessage<::protobuf::mapdata::MapAssets>(Arena*);
template<> ::protobuf::mapdata::MapData* Arena::CreateMaybeMessage<::protobuf::mapdata::MapData>(Arena*);
template<> ::protobuf::mapdata::NpcData* Arena::CreateMaybeMessage<::protobuf::mapdata::NpcData>(Arena*);
template<> ::protobuf::mapdata::Position* Arena::CreateMaybeMessage<::protobuf::mapdata::Position>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf {
namespace mapdata {

enum AreaData_AreaType : int {
  AreaData_AreaType_UNDEFINED = 0,
  AreaData_AreaType_AREA = 1,
  AreaData_AreaType_SUBAREA = 2
};
bool AreaData_AreaType_IsValid(int value);
constexpr AreaData_AreaType AreaData_AreaType_AreaType_MIN = AreaData_AreaType_UNDEFINED;
constexpr AreaData_AreaType AreaData_AreaType_AreaType_MAX = AreaData_AreaType_SUBAREA;
constexpr int AreaData_AreaType_AreaType_ARRAYSIZE = AreaData_AreaType_AreaType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AreaData_AreaType_descriptor();
template<typename T>
inline const std::string& AreaData_AreaType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AreaData_AreaType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AreaData_AreaType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AreaData_AreaType_descriptor(), enum_t_value);
}
inline bool AreaData_AreaType_Parse(
    const std::string& name, AreaData_AreaType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AreaData_AreaType>(
    AreaData_AreaType_descriptor(), name, value);
}
enum MapAssets_AssetsType : int {
  MapAssets_AssetsType_SUBAREA = 0,
  MapAssets_AssetsType_SATELLITE = 1,
  MapAssets_AssetsType_MINIMAP = 2
};
bool MapAssets_AssetsType_IsValid(int value);
constexpr MapAssets_AssetsType MapAssets_AssetsType_AssetsType_MIN = MapAssets_AssetsType_SUBAREA;
constexpr MapAssets_AssetsType MapAssets_AssetsType_AssetsType_MAX = MapAssets_AssetsType_MINIMAP;
constexpr int MapAssets_AssetsType_AssetsType_ARRAYSIZE = MapAssets_AssetsType_AssetsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MapAssets_AssetsType_descriptor();
template<typename T>
inline const std::string& MapAssets_AssetsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MapAssets_AssetsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MapAssets_AssetsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MapAssets_AssetsType_descriptor(), enum_t_value);
}
inline bool MapAssets_AssetsType_Parse(
    const std::string& name, MapAssets_AssetsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MapAssets_AssetsType>(
    MapAssets_AssetsType_descriptor(), name, value);
}
// ===================================================================

class MapData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.mapdata.MapData) */ {
 public:
  inline MapData() : MapData(nullptr) {};
  virtual ~MapData();

  MapData(const MapData& from);
  MapData(MapData&& from) noexcept
    : MapData() {
    *this = ::std::move(from);
  }

  inline MapData& operator=(const MapData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapData& operator=(MapData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapData* internal_default_instance() {
    return reinterpret_cast<const MapData*>(
               &_MapData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MapData& a, MapData& b) {
    a.Swap(&b);
  }
  inline void Swap(MapData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapData* New() const final {
    return CreateMaybeMessage<MapData>(nullptr);
  }

  MapData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapData& from);
  void MergeFrom(const MapData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.mapdata.MapData";
  }
  protected:
  explicit MapData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAreadataFieldNumber = 1,
    kNpcdataFieldNumber = 2,
    kMapassetsFieldNumber = 3,
    kTopleftedgeFieldNumber = 4,
    kBottomrightedgeFieldNumber = 5,
  };
  // repeated .protobuf.mapdata.AreaData areadata = 1;
  int areadata_size() const;
  private:
  int _internal_areadata_size() const;
  public:
  void clear_areadata();
  ::protobuf::mapdata::AreaData* mutable_areadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::mapdata::AreaData >*
      mutable_areadata();
  private:
  const ::protobuf::mapdata::AreaData& _internal_areadata(int index) const;
  ::protobuf::mapdata::AreaData* _internal_add_areadata();
  public:
  const ::protobuf::mapdata::AreaData& areadata(int index) const;
  ::protobuf::mapdata::AreaData* add_areadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::mapdata::AreaData >&
      areadata() const;

  // repeated .protobuf.mapdata.NpcData npcdata = 2;
  int npcdata_size() const;
  private:
  int _internal_npcdata_size() const;
  public:
  void clear_npcdata();
  ::protobuf::mapdata::NpcData* mutable_npcdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::mapdata::NpcData >*
      mutable_npcdata();
  private:
  const ::protobuf::mapdata::NpcData& _internal_npcdata(int index) const;
  ::protobuf::mapdata::NpcData* _internal_add_npcdata();
  public:
  const ::protobuf::mapdata::NpcData& npcdata(int index) const;
  ::protobuf::mapdata::NpcData* add_npcdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::mapdata::NpcData >&
      npcdata() const;

  // repeated .protobuf.mapdata.MapAssets mapassets = 3;
  int mapassets_size() const;
  private:
  int _internal_mapassets_size() const;
  public:
  void clear_mapassets();
  ::protobuf::mapdata::MapAssets* mutable_mapassets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::mapdata::MapAssets >*
      mutable_mapassets();
  private:
  const ::protobuf::mapdata::MapAssets& _internal_mapassets(int index) const;
  ::protobuf::mapdata::MapAssets* _internal_add_mapassets();
  public:
  const ::protobuf::mapdata::MapAssets& mapassets(int index) const;
  ::protobuf::mapdata::MapAssets* add_mapassets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::mapdata::MapAssets >&
      mapassets() const;

  // optional .protobuf.mapdata.Position topleftedge = 4;
  bool has_topleftedge() const;
  private:
  bool _internal_has_topleftedge() const;
  public:
  void clear_topleftedge();
  const ::protobuf::mapdata::Position& topleftedge() const;
  ::protobuf::mapdata::Position* release_topleftedge();
  ::protobuf::mapdata::Position* mutable_topleftedge();
  void set_allocated_topleftedge(::protobuf::mapdata::Position* topleftedge);
  private:
  const ::protobuf::mapdata::Position& _internal_topleftedge() const;
  ::protobuf::mapdata::Position* _internal_mutable_topleftedge();
  public:
  void unsafe_arena_set_allocated_topleftedge(
      ::protobuf::mapdata::Position* topleftedge);
  ::protobuf::mapdata::Position* unsafe_arena_release_topleftedge();

  // optional .protobuf.mapdata.Position bottomrightedge = 5;
  bool has_bottomrightedge() const;
  private:
  bool _internal_has_bottomrightedge() const;
  public:
  void clear_bottomrightedge();
  const ::protobuf::mapdata::Position& bottomrightedge() const;
  ::protobuf::mapdata::Position* release_bottomrightedge();
  ::protobuf::mapdata::Position* mutable_bottomrightedge();
  void set_allocated_bottomrightedge(::protobuf::mapdata::Position* bottomrightedge);
  private:
  const ::protobuf::mapdata::Position& _internal_bottomrightedge() const;
  ::protobuf::mapdata::Position* _internal_mutable_bottomrightedge();
  public:
  void unsafe_arena_set_allocated_bottomrightedge(
      ::protobuf::mapdata::Position* bottomrightedge);
  ::protobuf::mapdata::Position* unsafe_arena_release_bottomrightedge();

  // @@protoc_insertion_point(class_scope:protobuf.mapdata.MapData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::mapdata::AreaData > areadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::mapdata::NpcData > npcdata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::mapdata::MapAssets > mapassets_;
  ::protobuf::mapdata::Position* topleftedge_;
  ::protobuf::mapdata::Position* bottomrightedge_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Position PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.mapdata.Position) */ {
 public:
  inline Position() : Position(nullptr) {};
  virtual ~Position();

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.mapdata.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosxFieldNumber = 1,
    kPosyFieldNumber = 2,
    kPoszFieldNumber = 3,
  };
  // optional uint32 posx = 1;
  bool has_posx() const;
  private:
  bool _internal_has_posx() const;
  public:
  void clear_posx();
  ::PROTOBUF_NAMESPACE_ID::uint32 posx() const;
  void set_posx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_posx() const;
  void _internal_set_posx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 posy = 2;
  bool has_posy() const;
  private:
  bool _internal_has_posy() const;
  public:
  void clear_posy();
  ::PROTOBUF_NAMESPACE_ID::uint32 posy() const;
  void set_posy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_posy() const;
  void _internal_set_posy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 posz = 3;
  bool has_posz() const;
  private:
  bool _internal_has_posz() const;
  public:
  void clear_posz();
  ::PROTOBUF_NAMESPACE_ID::uint32 posz() const;
  void set_posz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_posz() const;
  void _internal_set_posz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.mapdata.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 posx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 posy_;
  ::PROTOBUF_NAMESPACE_ID::uint32 posz_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class AreaData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.mapdata.AreaData) */ {
 public:
  inline AreaData() : AreaData(nullptr) {};
  virtual ~AreaData();

  AreaData(const AreaData& from);
  AreaData(AreaData&& from) noexcept
    : AreaData() {
    *this = ::std::move(from);
  }

  inline AreaData& operator=(const AreaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AreaData& operator=(AreaData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AreaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AreaData* internal_default_instance() {
    return reinterpret_cast<const AreaData*>(
               &_AreaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AreaData& a, AreaData& b) {
    a.Swap(&b);
  }
  inline void Swap(AreaData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AreaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AreaData* New() const final {
    return CreateMaybeMessage<AreaData>(nullptr);
  }

  AreaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AreaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AreaData& from);
  void MergeFrom(const AreaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AreaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.mapdata.AreaData";
  }
  protected:
  explicit AreaData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AreaData_AreaType AreaType;
  static constexpr AreaType UNDEFINED =
    AreaData_AreaType_UNDEFINED;
  static constexpr AreaType AREA =
    AreaData_AreaType_AREA;
  static constexpr AreaType SUBAREA =
    AreaData_AreaType_SUBAREA;
  static inline bool AreaType_IsValid(int value) {
    return AreaData_AreaType_IsValid(value);
  }
  static constexpr AreaType AreaType_MIN =
    AreaData_AreaType_AreaType_MIN;
  static constexpr AreaType AreaType_MAX =
    AreaData_AreaType_AreaType_MAX;
  static constexpr int AreaType_ARRAYSIZE =
    AreaData_AreaType_AreaType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AreaType_descriptor() {
    return AreaData_AreaType_descriptor();
  }
  template<typename T>
  static inline const std::string& AreaType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AreaType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AreaType_Name.");
    return AreaData_AreaType_Name(enum_t_value);
  }
  static inline bool AreaType_Parse(const std::string& name,
      AreaType* value) {
    return AreaData_AreaType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSubareaFieldNumber = 4,
    kNameFieldNumber = 2,
    kAkanameFieldNumber = 7,
    kAreapositionFieldNumber = 5,
    kAreaidFieldNumber = 1,
    kTypeFieldNumber = 3,
    kDonateFieldNumber = 6,
  };
  // repeated uint32 subarea = 4;
  int subarea_size() const;
  private:
  int _internal_subarea_size() const;
  public:
  void clear_subarea();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_subarea(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_subarea() const;
  void _internal_add_subarea(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_subarea();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 subarea(int index) const;
  void set_subarea(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_subarea(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      subarea() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_subarea();

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string akaname = 7;
  bool has_akaname() const;
  private:
  bool _internal_has_akaname() const;
  public:
  void clear_akaname();
  const std::string& akaname() const;
  void set_akaname(const std::string& value);
  void set_akaname(std::string&& value);
  void set_akaname(const char* value);
  void set_akaname(const char* value, size_t size);
  std::string* mutable_akaname();
  std::string* release_akaname();
  void set_allocated_akaname(std::string* akaname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_akaname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_akaname(
      std::string* akaname);
  private:
  const std::string& _internal_akaname() const;
  void _internal_set_akaname(const std::string& value);
  std::string* _internal_mutable_akaname();
  public:

  // optional .protobuf.mapdata.Position areaposition = 5;
  bool has_areaposition() const;
  private:
  bool _internal_has_areaposition() const;
  public:
  void clear_areaposition();
  const ::protobuf::mapdata::Position& areaposition() const;
  ::protobuf::mapdata::Position* release_areaposition();
  ::protobuf::mapdata::Position* mutable_areaposition();
  void set_allocated_areaposition(::protobuf::mapdata::Position* areaposition);
  private:
  const ::protobuf::mapdata::Position& _internal_areaposition() const;
  ::protobuf::mapdata::Position* _internal_mutable_areaposition();
  public:
  void unsafe_arena_set_allocated_areaposition(
      ::protobuf::mapdata::Position* areaposition);
  ::protobuf::mapdata::Position* unsafe_arena_release_areaposition();

  // optional uint32 areaid = 1;
  bool has_areaid() const;
  private:
  bool _internal_has_areaid() const;
  public:
  void clear_areaid();
  ::PROTOBUF_NAMESPACE_ID::uint32 areaid() const;
  void set_areaid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_areaid() const;
  void _internal_set_areaid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .protobuf.mapdata.AreaData.AreaType type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::protobuf::mapdata::AreaData_AreaType type() const;
  void set_type(::protobuf::mapdata::AreaData_AreaType value);
  private:
  ::protobuf::mapdata::AreaData_AreaType _internal_type() const;
  void _internal_set_type(::protobuf::mapdata::AreaData_AreaType value);
  public:

  // optional bool donate = 6;
  bool has_donate() const;
  private:
  bool _internal_has_donate() const;
  public:
  void clear_donate();
  bool donate() const;
  void set_donate(bool value);
  private:
  bool _internal_donate() const;
  void _internal_set_donate(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.mapdata.AreaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > subarea_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr akaname_;
  ::protobuf::mapdata::Position* areaposition_;
  ::PROTOBUF_NAMESPACE_ID::uint32 areaid_;
  int type_;
  bool donate_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class NpcData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.mapdata.NpcData) */ {
 public:
  inline NpcData() : NpcData(nullptr) {};
  virtual ~NpcData();

  NpcData(const NpcData& from);
  NpcData(NpcData&& from) noexcept
    : NpcData() {
    *this = ::std::move(from);
  }

  inline NpcData& operator=(const NpcData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NpcData& operator=(NpcData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NpcData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NpcData* internal_default_instance() {
    return reinterpret_cast<const NpcData*>(
               &_NpcData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NpcData& a, NpcData& b) {
    a.Swap(&b);
  }
  inline void Swap(NpcData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NpcData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NpcData* New() const final {
    return CreateMaybeMessage<NpcData>(nullptr);
  }

  NpcData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NpcData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NpcData& from);
  void MergeFrom(const NpcData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NpcData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.mapdata.NpcData";
  }
  protected:
  explicit NpcData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPositionFieldNumber = 2,
    kSubareaidFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .protobuf.mapdata.Position position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::protobuf::mapdata::Position& position() const;
  ::protobuf::mapdata::Position* release_position();
  ::protobuf::mapdata::Position* mutable_position();
  void set_allocated_position(::protobuf::mapdata::Position* position);
  private:
  const ::protobuf::mapdata::Position& _internal_position() const;
  ::protobuf::mapdata::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::protobuf::mapdata::Position* position);
  ::protobuf::mapdata::Position* unsafe_arena_release_position();

  // optional uint32 subareaid = 3;
  bool has_subareaid() const;
  private:
  bool _internal_has_subareaid() const;
  public:
  void clear_subareaid();
  ::PROTOBUF_NAMESPACE_ID::uint32 subareaid() const;
  void set_subareaid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_subareaid() const;
  void _internal_set_subareaid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.mapdata.NpcData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::protobuf::mapdata::Position* position_;
  ::PROTOBUF_NAMESPACE_ID::uint32 subareaid_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class MapAssets PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.mapdata.MapAssets) */ {
 public:
  inline MapAssets() : MapAssets(nullptr) {};
  virtual ~MapAssets();

  MapAssets(const MapAssets& from);
  MapAssets(MapAssets&& from) noexcept
    : MapAssets() {
    *this = ::std::move(from);
  }

  inline MapAssets& operator=(const MapAssets& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapAssets& operator=(MapAssets&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapAssets& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapAssets* internal_default_instance() {
    return reinterpret_cast<const MapAssets*>(
               &_MapAssets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MapAssets& a, MapAssets& b) {
    a.Swap(&b);
  }
  inline void Swap(MapAssets* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapAssets* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapAssets* New() const final {
    return CreateMaybeMessage<MapAssets>(nullptr);
  }

  MapAssets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapAssets>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapAssets& from);
  void MergeFrom(const MapAssets& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapAssets* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.mapdata.MapAssets";
  }
  protected:
  explicit MapAssets(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MapAssets_AssetsType AssetsType;
  static constexpr AssetsType SUBAREA =
    MapAssets_AssetsType_SUBAREA;
  static constexpr AssetsType SATELLITE =
    MapAssets_AssetsType_SATELLITE;
  static constexpr AssetsType MINIMAP =
    MapAssets_AssetsType_MINIMAP;
  static inline bool AssetsType_IsValid(int value) {
    return MapAssets_AssetsType_IsValid(value);
  }
  static constexpr AssetsType AssetsType_MIN =
    MapAssets_AssetsType_AssetsType_MIN;
  static constexpr AssetsType AssetsType_MAX =
    MapAssets_AssetsType_AssetsType_MAX;
  static constexpr int AssetsType_ARRAYSIZE =
    MapAssets_AssetsType_AssetsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AssetsType_descriptor() {
    return MapAssets_AssetsType_descriptor();
  }
  template<typename T>
  static inline const std::string& AssetsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AssetsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AssetsType_Name.");
    return MapAssets_AssetsType_Name(enum_t_value);
  }
  static inline bool AssetsType_Parse(const std::string& name,
      AssetsType* value) {
    return MapAssets_AssetsType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 3,
    kTopleftFieldNumber = 2,
    kTypeFieldNumber = 1,
    kWidthsquareFieldNumber = 4,
    kHeightsquareFieldNumber = 5,
    kAreaidFieldNumber = 6,
    kScaleFieldNumber = 7,
  };
  // optional string filename = 3;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_filename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_filename(
      std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional .protobuf.mapdata.Position topleft = 2;
  bool has_topleft() const;
  private:
  bool _internal_has_topleft() const;
  public:
  void clear_topleft();
  const ::protobuf::mapdata::Position& topleft() const;
  ::protobuf::mapdata::Position* release_topleft();
  ::protobuf::mapdata::Position* mutable_topleft();
  void set_allocated_topleft(::protobuf::mapdata::Position* topleft);
  private:
  const ::protobuf::mapdata::Position& _internal_topleft() const;
  ::protobuf::mapdata::Position* _internal_mutable_topleft();
  public:
  void unsafe_arena_set_allocated_topleft(
      ::protobuf::mapdata::Position* topleft);
  ::protobuf::mapdata::Position* unsafe_arena_release_topleft();

  // optional .protobuf.mapdata.MapAssets.AssetsType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::protobuf::mapdata::MapAssets_AssetsType type() const;
  void set_type(::protobuf::mapdata::MapAssets_AssetsType value);
  private:
  ::protobuf::mapdata::MapAssets_AssetsType _internal_type() const;
  void _internal_set_type(::protobuf::mapdata::MapAssets_AssetsType value);
  public:

  // optional uint32 widthsquare = 4;
  bool has_widthsquare() const;
  private:
  bool _internal_has_widthsquare() const;
  public:
  void clear_widthsquare();
  ::PROTOBUF_NAMESPACE_ID::uint32 widthsquare() const;
  void set_widthsquare(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_widthsquare() const;
  void _internal_set_widthsquare(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 heightsquare = 5;
  bool has_heightsquare() const;
  private:
  bool _internal_has_heightsquare() const;
  public:
  void clear_heightsquare();
  ::PROTOBUF_NAMESPACE_ID::uint32 heightsquare() const;
  void set_heightsquare(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heightsquare() const;
  void _internal_set_heightsquare(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 areaid = 6;
  bool has_areaid() const;
  private:
  bool _internal_has_areaid() const;
  public:
  void clear_areaid();
  ::PROTOBUF_NAMESPACE_ID::uint32 areaid() const;
  void set_areaid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_areaid() const;
  void _internal_set_areaid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 scale = 7;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  ::PROTOBUF_NAMESPACE_ID::uint32 scale() const;
  void set_scale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_scale() const;
  void _internal_set_scale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.mapdata.MapAssets)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::protobuf::mapdata::Position* topleft_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 widthsquare_;
  ::PROTOBUF_NAMESPACE_ID::uint32 heightsquare_;
  ::PROTOBUF_NAMESPACE_ID::uint32 areaid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 scale_;
  friend struct ::TableStruct_map_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MapData

// repeated .protobuf.mapdata.AreaData areadata = 1;
inline int MapData::_internal_areadata_size() const {
  return areadata_.size();
}
inline int MapData::areadata_size() const {
  return _internal_areadata_size();
}
inline void MapData::clear_areadata() {
  areadata_.Clear();
}
inline ::protobuf::mapdata::AreaData* MapData::mutable_areadata(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.mapdata.MapData.areadata)
  return areadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::mapdata::AreaData >*
MapData::mutable_areadata() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.mapdata.MapData.areadata)
  return &areadata_;
}
inline const ::protobuf::mapdata::AreaData& MapData::_internal_areadata(int index) const {
  return areadata_.Get(index);
}
inline const ::protobuf::mapdata::AreaData& MapData::areadata(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.mapdata.MapData.areadata)
  return _internal_areadata(index);
}
inline ::protobuf::mapdata::AreaData* MapData::_internal_add_areadata() {
  return areadata_.Add();
}
inline ::protobuf::mapdata::AreaData* MapData::add_areadata() {
  // @@protoc_insertion_point(field_add:protobuf.mapdata.MapData.areadata)
  return _internal_add_areadata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::mapdata::AreaData >&
MapData::areadata() const {
  // @@protoc_insertion_point(field_list:protobuf.mapdata.MapData.areadata)
  return areadata_;
}

// repeated .protobuf.mapdata.NpcData npcdata = 2;
inline int MapData::_internal_npcdata_size() const {
  return npcdata_.size();
}
inline int MapData::npcdata_size() const {
  return _internal_npcdata_size();
}
inline void MapData::clear_npcdata() {
  npcdata_.Clear();
}
inline ::protobuf::mapdata::NpcData* MapData::mutable_npcdata(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.mapdata.MapData.npcdata)
  return npcdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::mapdata::NpcData >*
MapData::mutable_npcdata() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.mapdata.MapData.npcdata)
  return &npcdata_;
}
inline const ::protobuf::mapdata::NpcData& MapData::_internal_npcdata(int index) const {
  return npcdata_.Get(index);
}
inline const ::protobuf::mapdata::NpcData& MapData::npcdata(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.mapdata.MapData.npcdata)
  return _internal_npcdata(index);
}
inline ::protobuf::mapdata::NpcData* MapData::_internal_add_npcdata() {
  return npcdata_.Add();
}
inline ::protobuf::mapdata::NpcData* MapData::add_npcdata() {
  // @@protoc_insertion_point(field_add:protobuf.mapdata.MapData.npcdata)
  return _internal_add_npcdata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::mapdata::NpcData >&
MapData::npcdata() const {
  // @@protoc_insertion_point(field_list:protobuf.mapdata.MapData.npcdata)
  return npcdata_;
}

// repeated .protobuf.mapdata.MapAssets mapassets = 3;
inline int MapData::_internal_mapassets_size() const {
  return mapassets_.size();
}
inline int MapData::mapassets_size() const {
  return _internal_mapassets_size();
}
inline void MapData::clear_mapassets() {
  mapassets_.Clear();
}
inline ::protobuf::mapdata::MapAssets* MapData::mutable_mapassets(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.mapdata.MapData.mapassets)
  return mapassets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::mapdata::MapAssets >*
MapData::mutable_mapassets() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.mapdata.MapData.mapassets)
  return &mapassets_;
}
inline const ::protobuf::mapdata::MapAssets& MapData::_internal_mapassets(int index) const {
  return mapassets_.Get(index);
}
inline const ::protobuf::mapdata::MapAssets& MapData::mapassets(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.mapdata.MapData.mapassets)
  return _internal_mapassets(index);
}
inline ::protobuf::mapdata::MapAssets* MapData::_internal_add_mapassets() {
  return mapassets_.Add();
}
inline ::protobuf::mapdata::MapAssets* MapData::add_mapassets() {
  // @@protoc_insertion_point(field_add:protobuf.mapdata.MapData.mapassets)
  return _internal_add_mapassets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::mapdata::MapAssets >&
MapData::mapassets() const {
  // @@protoc_insertion_point(field_list:protobuf.mapdata.MapData.mapassets)
  return mapassets_;
}

// optional .protobuf.mapdata.Position topleftedge = 4;
inline bool MapData::_internal_has_topleftedge() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || topleftedge_ != nullptr);
  return value;
}
inline bool MapData::has_topleftedge() const {
  return _internal_has_topleftedge();
}
inline void MapData::clear_topleftedge() {
  if (topleftedge_ != nullptr) topleftedge_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf::mapdata::Position& MapData::_internal_topleftedge() const {
  const ::protobuf::mapdata::Position* p = topleftedge_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf::mapdata::Position*>(
      &::protobuf::mapdata::_Position_default_instance_);
}
inline const ::protobuf::mapdata::Position& MapData::topleftedge() const {
  // @@protoc_insertion_point(field_get:protobuf.mapdata.MapData.topleftedge)
  return _internal_topleftedge();
}
inline void MapData::unsafe_arena_set_allocated_topleftedge(
    ::protobuf::mapdata::Position* topleftedge) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topleftedge_);
  }
  topleftedge_ = topleftedge;
  if (topleftedge) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.mapdata.MapData.topleftedge)
}
inline ::protobuf::mapdata::Position* MapData::release_topleftedge() {
  auto temp = unsafe_arena_release_topleftedge();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protobuf::mapdata::Position* MapData::unsafe_arena_release_topleftedge() {
  // @@protoc_insertion_point(field_release:protobuf.mapdata.MapData.topleftedge)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf::mapdata::Position* temp = topleftedge_;
  topleftedge_ = nullptr;
  return temp;
}
inline ::protobuf::mapdata::Position* MapData::_internal_mutable_topleftedge() {
  _has_bits_[0] |= 0x00000001u;
  if (topleftedge_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::mapdata::Position>(GetArena());
    topleftedge_ = p;
  }
  return topleftedge_;
}
inline ::protobuf::mapdata::Position* MapData::mutable_topleftedge() {
  // @@protoc_insertion_point(field_mutable:protobuf.mapdata.MapData.topleftedge)
  return _internal_mutable_topleftedge();
}
inline void MapData::set_allocated_topleftedge(::protobuf::mapdata::Position* topleftedge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete topleftedge_;
  }
  if (topleftedge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(topleftedge);
    if (message_arena != submessage_arena) {
      topleftedge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topleftedge, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  topleftedge_ = topleftedge;
  // @@protoc_insertion_point(field_set_allocated:protobuf.mapdata.MapData.topleftedge)
}

// optional .protobuf.mapdata.Position bottomrightedge = 5;
inline bool MapData::_internal_has_bottomrightedge() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || bottomrightedge_ != nullptr);
  return value;
}
inline bool MapData::has_bottomrightedge() const {
  return _internal_has_bottomrightedge();
}
inline void MapData::clear_bottomrightedge() {
  if (bottomrightedge_ != nullptr) bottomrightedge_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::protobuf::mapdata::Position& MapData::_internal_bottomrightedge() const {
  const ::protobuf::mapdata::Position* p = bottomrightedge_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf::mapdata::Position*>(
      &::protobuf::mapdata::_Position_default_instance_);
}
inline const ::protobuf::mapdata::Position& MapData::bottomrightedge() const {
  // @@protoc_insertion_point(field_get:protobuf.mapdata.MapData.bottomrightedge)
  return _internal_bottomrightedge();
}
inline void MapData::unsafe_arena_set_allocated_bottomrightedge(
    ::protobuf::mapdata::Position* bottomrightedge) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bottomrightedge_);
  }
  bottomrightedge_ = bottomrightedge;
  if (bottomrightedge) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.mapdata.MapData.bottomrightedge)
}
inline ::protobuf::mapdata::Position* MapData::release_bottomrightedge() {
  auto temp = unsafe_arena_release_bottomrightedge();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protobuf::mapdata::Position* MapData::unsafe_arena_release_bottomrightedge() {
  // @@protoc_insertion_point(field_release:protobuf.mapdata.MapData.bottomrightedge)
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf::mapdata::Position* temp = bottomrightedge_;
  bottomrightedge_ = nullptr;
  return temp;
}
inline ::protobuf::mapdata::Position* MapData::_internal_mutable_bottomrightedge() {
  _has_bits_[0] |= 0x00000002u;
  if (bottomrightedge_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::mapdata::Position>(GetArena());
    bottomrightedge_ = p;
  }
  return bottomrightedge_;
}
inline ::protobuf::mapdata::Position* MapData::mutable_bottomrightedge() {
  // @@protoc_insertion_point(field_mutable:protobuf.mapdata.MapData.bottomrightedge)
  return _internal_mutable_bottomrightedge();
}
inline void MapData::set_allocated_bottomrightedge(::protobuf::mapdata::Position* bottomrightedge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bottomrightedge_;
  }
  if (bottomrightedge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bottomrightedge);
    if (message_arena != submessage_arena) {
      bottomrightedge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottomrightedge, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bottomrightedge_ = bottomrightedge;
  // @@protoc_insertion_point(field_set_allocated:protobuf.mapdata.MapData.bottomrightedge)
}

// -------------------------------------------------------------------

// Position

// optional uint32 posx = 1;
inline bool Position::_internal_has_posx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Position::has_posx() const {
  return _internal_has_posx();
}
inline void Position::clear_posx() {
  posx_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Position::_internal_posx() const {
  return posx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Position::posx() const {
  // @@protoc_insertion_point(field_get:protobuf.mapdata.Position.posx)
  return _internal_posx();
}
inline void Position::_internal_set_posx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  posx_ = value;
}
inline void Position::set_posx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:protobuf.mapdata.Position.posx)
}

// optional uint32 posy = 2;
inline bool Position::_internal_has_posy() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Position::has_posy() const {
  return _internal_has_posy();
}
inline void Position::clear_posy() {
  posy_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Position::_internal_posy() const {
  return posy_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Position::posy() const {
  // @@protoc_insertion_point(field_get:protobuf.mapdata.Position.posy)
  return _internal_posy();
}
inline void Position::_internal_set_posy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  posy_ = value;
}
inline void Position::set_posy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:protobuf.mapdata.Position.posy)
}

// optional uint32 posz = 3;
inline bool Position::_internal_has_posz() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Position::has_posz() const {
  return _internal_has_posz();
}
inline void Position::clear_posz() {
  posz_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Position::_internal_posz() const {
  return posz_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Position::posz() const {
  // @@protoc_insertion_point(field_get:protobuf.mapdata.Position.posz)
  return _internal_posz();
}
inline void Position::_internal_set_posz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  posz_ = value;
}
inline void Position::set_posz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_posz(value);
  // @@protoc_insertion_point(field_set:protobuf.mapdata.Position.posz)
}

// -------------------------------------------------------------------

// AreaData

// optional uint32 areaid = 1;
inline bool AreaData::_internal_has_areaid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AreaData::has_areaid() const {
  return _internal_has_areaid();
}
inline void AreaData::clear_areaid() {
  areaid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AreaData::_internal_areaid() const {
  return areaid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AreaData::areaid() const {
  // @@protoc_insertion_point(field_get:protobuf.mapdata.AreaData.areaid)
  return _internal_areaid();
}
inline void AreaData::_internal_set_areaid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  areaid_ = value;
}
inline void AreaData::set_areaid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_areaid(value);
  // @@protoc_insertion_point(field_set:protobuf.mapdata.AreaData.areaid)
}

// optional string name = 2;
inline bool AreaData::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AreaData::has_name() const {
  return _internal_has_name();
}
inline void AreaData::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AreaData::name() const {
  // @@protoc_insertion_point(field_get:protobuf.mapdata.AreaData.name)
  return _internal_name();
}
inline void AreaData::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:protobuf.mapdata.AreaData.name)
}
inline std::string* AreaData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:protobuf.mapdata.AreaData.name)
  return _internal_mutable_name();
}
inline const std::string& AreaData::_internal_name() const {
  return name_.Get();
}
inline void AreaData::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AreaData::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.mapdata.AreaData.name)
}
inline void AreaData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.mapdata.AreaData.name)
}
inline void AreaData::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.mapdata.AreaData.name)
}
inline std::string* AreaData::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AreaData::release_name() {
  // @@protoc_insertion_point(field_release:protobuf.mapdata.AreaData.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AreaData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.mapdata.AreaData.name)
}
inline std::string* AreaData::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.mapdata.AreaData.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AreaData::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.mapdata.AreaData.name)
}

// optional .protobuf.mapdata.AreaData.AreaType type = 3;
inline bool AreaData::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AreaData::has_type() const {
  return _internal_has_type();
}
inline void AreaData::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::protobuf::mapdata::AreaData_AreaType AreaData::_internal_type() const {
  return static_cast< ::protobuf::mapdata::AreaData_AreaType >(type_);
}
inline ::protobuf::mapdata::AreaData_AreaType AreaData::type() const {
  // @@protoc_insertion_point(field_get:protobuf.mapdata.AreaData.type)
  return _internal_type();
}
inline void AreaData::_internal_set_type(::protobuf::mapdata::AreaData_AreaType value) {
  assert(::protobuf::mapdata::AreaData_AreaType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void AreaData::set_type(::protobuf::mapdata::AreaData_AreaType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:protobuf.mapdata.AreaData.type)
}

// repeated uint32 subarea = 4;
inline int AreaData::_internal_subarea_size() const {
  return subarea_.size();
}
inline int AreaData::subarea_size() const {
  return _internal_subarea_size();
}
inline void AreaData::clear_subarea() {
  subarea_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AreaData::_internal_subarea(int index) const {
  return subarea_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AreaData::subarea(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.mapdata.AreaData.subarea)
  return _internal_subarea(index);
}
inline void AreaData::set_subarea(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  subarea_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.mapdata.AreaData.subarea)
}
inline void AreaData::_internal_add_subarea(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  subarea_.Add(value);
}
inline void AreaData::add_subarea(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_subarea(value);
  // @@protoc_insertion_point(field_add:protobuf.mapdata.AreaData.subarea)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
AreaData::_internal_subarea() const {
  return subarea_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
AreaData::subarea() const {
  // @@protoc_insertion_point(field_list:protobuf.mapdata.AreaData.subarea)
  return _internal_subarea();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
AreaData::_internal_mutable_subarea() {
  return &subarea_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
AreaData::mutable_subarea() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.mapdata.AreaData.subarea)
  return _internal_mutable_subarea();
}

// optional .protobuf.mapdata.Position areaposition = 5;
inline bool AreaData::_internal_has_areaposition() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || areaposition_ != nullptr);
  return value;
}
inline bool AreaData::has_areaposition() const {
  return _internal_has_areaposition();
}
inline void AreaData::clear_areaposition() {
  if (areaposition_ != nullptr) areaposition_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::protobuf::mapdata::Position& AreaData::_internal_areaposition() const {
  const ::protobuf::mapdata::Position* p = areaposition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf::mapdata::Position*>(
      &::protobuf::mapdata::_Position_default_instance_);
}
inline const ::protobuf::mapdata::Position& AreaData::areaposition() const {
  // @@protoc_insertion_point(field_get:protobuf.mapdata.AreaData.areaposition)
  return _internal_areaposition();
}
inline void AreaData::unsafe_arena_set_allocated_areaposition(
    ::protobuf::mapdata::Position* areaposition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(areaposition_);
  }
  areaposition_ = areaposition;
  if (areaposition) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.mapdata.AreaData.areaposition)
}
inline ::protobuf::mapdata::Position* AreaData::release_areaposition() {
  auto temp = unsafe_arena_release_areaposition();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protobuf::mapdata::Position* AreaData::unsafe_arena_release_areaposition() {
  // @@protoc_insertion_point(field_release:protobuf.mapdata.AreaData.areaposition)
  _has_bits_[0] &= ~0x00000004u;
  ::protobuf::mapdata::Position* temp = areaposition_;
  areaposition_ = nullptr;
  return temp;
}
inline ::protobuf::mapdata::Position* AreaData::_internal_mutable_areaposition() {
  _has_bits_[0] |= 0x00000004u;
  if (areaposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::mapdata::Position>(GetArena());
    areaposition_ = p;
  }
  return areaposition_;
}
inline ::protobuf::mapdata::Position* AreaData::mutable_areaposition() {
  // @@protoc_insertion_point(field_mutable:protobuf.mapdata.AreaData.areaposition)
  return _internal_mutable_areaposition();
}
inline void AreaData::set_allocated_areaposition(::protobuf::mapdata::Position* areaposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete areaposition_;
  }
  if (areaposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(areaposition);
    if (message_arena != submessage_arena) {
      areaposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, areaposition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  areaposition_ = areaposition;
  // @@protoc_insertion_point(field_set_allocated:protobuf.mapdata.AreaData.areaposition)
}

// optional bool donate = 6;
inline bool AreaData::_internal_has_donate() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AreaData::has_donate() const {
  return _internal_has_donate();
}
inline void AreaData::clear_donate() {
  donate_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool AreaData::_internal_donate() const {
  return donate_;
}
inline bool AreaData::donate() const {
  // @@protoc_insertion_point(field_get:protobuf.mapdata.AreaData.donate)
  return _internal_donate();
}
inline void AreaData::_internal_set_donate(bool value) {
  _has_bits_[0] |= 0x00000020u;
  donate_ = value;
}
inline void AreaData::set_donate(bool value) {
  _internal_set_donate(value);
  // @@protoc_insertion_point(field_set:protobuf.mapdata.AreaData.donate)
}

// optional string akaname = 7;
inline bool AreaData::_internal_has_akaname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AreaData::has_akaname() const {
  return _internal_has_akaname();
}
inline void AreaData::clear_akaname() {
  akaname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AreaData::akaname() const {
  // @@protoc_insertion_point(field_get:protobuf.mapdata.AreaData.akaname)
  return _internal_akaname();
}
inline void AreaData::set_akaname(const std::string& value) {
  _internal_set_akaname(value);
  // @@protoc_insertion_point(field_set:protobuf.mapdata.AreaData.akaname)
}
inline std::string* AreaData::mutable_akaname() {
  // @@protoc_insertion_point(field_mutable:protobuf.mapdata.AreaData.akaname)
  return _internal_mutable_akaname();
}
inline const std::string& AreaData::_internal_akaname() const {
  return akaname_.Get();
}
inline void AreaData::_internal_set_akaname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  akaname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AreaData::set_akaname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  akaname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.mapdata.AreaData.akaname)
}
inline void AreaData::set_akaname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  akaname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.mapdata.AreaData.akaname)
}
inline void AreaData::set_akaname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  akaname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.mapdata.AreaData.akaname)
}
inline std::string* AreaData::_internal_mutable_akaname() {
  _has_bits_[0] |= 0x00000002u;
  return akaname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AreaData::release_akaname() {
  // @@protoc_insertion_point(field_release:protobuf.mapdata.AreaData.akaname)
  if (!_internal_has_akaname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return akaname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AreaData::set_allocated_akaname(std::string* akaname) {
  if (akaname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  akaname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), akaname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.mapdata.AreaData.akaname)
}
inline std::string* AreaData::unsafe_arena_release_akaname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.mapdata.AreaData.akaname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return akaname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AreaData::unsafe_arena_set_allocated_akaname(
    std::string* akaname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (akaname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  akaname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      akaname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.mapdata.AreaData.akaname)
}

// -------------------------------------------------------------------

// NpcData

// optional string name = 1;
inline bool NpcData::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NpcData::has_name() const {
  return _internal_has_name();
}
inline void NpcData::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NpcData::name() const {
  // @@protoc_insertion_point(field_get:protobuf.mapdata.NpcData.name)
  return _internal_name();
}
inline void NpcData::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:protobuf.mapdata.NpcData.name)
}
inline std::string* NpcData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:protobuf.mapdata.NpcData.name)
  return _internal_mutable_name();
}
inline const std::string& NpcData::_internal_name() const {
  return name_.Get();
}
inline void NpcData::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NpcData::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.mapdata.NpcData.name)
}
inline void NpcData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.mapdata.NpcData.name)
}
inline void NpcData::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.mapdata.NpcData.name)
}
inline std::string* NpcData::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NpcData::release_name() {
  // @@protoc_insertion_point(field_release:protobuf.mapdata.NpcData.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NpcData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.mapdata.NpcData.name)
}
inline std::string* NpcData::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.mapdata.NpcData.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NpcData::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.mapdata.NpcData.name)
}

// optional .protobuf.mapdata.Position position = 2;
inline bool NpcData::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool NpcData::has_position() const {
  return _internal_has_position();
}
inline void NpcData::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::protobuf::mapdata::Position& NpcData::_internal_position() const {
  const ::protobuf::mapdata::Position* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf::mapdata::Position*>(
      &::protobuf::mapdata::_Position_default_instance_);
}
inline const ::protobuf::mapdata::Position& NpcData::position() const {
  // @@protoc_insertion_point(field_get:protobuf.mapdata.NpcData.position)
  return _internal_position();
}
inline void NpcData::unsafe_arena_set_allocated_position(
    ::protobuf::mapdata::Position* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.mapdata.NpcData.position)
}
inline ::protobuf::mapdata::Position* NpcData::release_position() {
  auto temp = unsafe_arena_release_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protobuf::mapdata::Position* NpcData::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:protobuf.mapdata.NpcData.position)
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf::mapdata::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::protobuf::mapdata::Position* NpcData::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000002u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::mapdata::Position>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::protobuf::mapdata::Position* NpcData::mutable_position() {
  // @@protoc_insertion_point(field_mutable:protobuf.mapdata.NpcData.position)
  return _internal_mutable_position();
}
inline void NpcData::set_allocated_position(::protobuf::mapdata::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:protobuf.mapdata.NpcData.position)
}

// optional uint32 subareaid = 3;
inline bool NpcData::_internal_has_subareaid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NpcData::has_subareaid() const {
  return _internal_has_subareaid();
}
inline void NpcData::clear_subareaid() {
  subareaid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NpcData::_internal_subareaid() const {
  return subareaid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NpcData::subareaid() const {
  // @@protoc_insertion_point(field_get:protobuf.mapdata.NpcData.subareaid)
  return _internal_subareaid();
}
inline void NpcData::_internal_set_subareaid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  subareaid_ = value;
}
inline void NpcData::set_subareaid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_subareaid(value);
  // @@protoc_insertion_point(field_set:protobuf.mapdata.NpcData.subareaid)
}

// -------------------------------------------------------------------

// MapAssets

// optional .protobuf.mapdata.MapAssets.AssetsType type = 1;
inline bool MapAssets::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MapAssets::has_type() const {
  return _internal_has_type();
}
inline void MapAssets::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::protobuf::mapdata::MapAssets_AssetsType MapAssets::_internal_type() const {
  return static_cast< ::protobuf::mapdata::MapAssets_AssetsType >(type_);
}
inline ::protobuf::mapdata::MapAssets_AssetsType MapAssets::type() const {
  // @@protoc_insertion_point(field_get:protobuf.mapdata.MapAssets.type)
  return _internal_type();
}
inline void MapAssets::_internal_set_type(::protobuf::mapdata::MapAssets_AssetsType value) {
  assert(::protobuf::mapdata::MapAssets_AssetsType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void MapAssets::set_type(::protobuf::mapdata::MapAssets_AssetsType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:protobuf.mapdata.MapAssets.type)
}

// optional .protobuf.mapdata.Position topleft = 2;
inline bool MapAssets::_internal_has_topleft() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || topleft_ != nullptr);
  return value;
}
inline bool MapAssets::has_topleft() const {
  return _internal_has_topleft();
}
inline void MapAssets::clear_topleft() {
  if (topleft_ != nullptr) topleft_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::protobuf::mapdata::Position& MapAssets::_internal_topleft() const {
  const ::protobuf::mapdata::Position* p = topleft_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf::mapdata::Position*>(
      &::protobuf::mapdata::_Position_default_instance_);
}
inline const ::protobuf::mapdata::Position& MapAssets::topleft() const {
  // @@protoc_insertion_point(field_get:protobuf.mapdata.MapAssets.topleft)
  return _internal_topleft();
}
inline void MapAssets::unsafe_arena_set_allocated_topleft(
    ::protobuf::mapdata::Position* topleft) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topleft_);
  }
  topleft_ = topleft;
  if (topleft) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.mapdata.MapAssets.topleft)
}
inline ::protobuf::mapdata::Position* MapAssets::release_topleft() {
  auto temp = unsafe_arena_release_topleft();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protobuf::mapdata::Position* MapAssets::unsafe_arena_release_topleft() {
  // @@protoc_insertion_point(field_release:protobuf.mapdata.MapAssets.topleft)
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf::mapdata::Position* temp = topleft_;
  topleft_ = nullptr;
  return temp;
}
inline ::protobuf::mapdata::Position* MapAssets::_internal_mutable_topleft() {
  _has_bits_[0] |= 0x00000002u;
  if (topleft_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::mapdata::Position>(GetArena());
    topleft_ = p;
  }
  return topleft_;
}
inline ::protobuf::mapdata::Position* MapAssets::mutable_topleft() {
  // @@protoc_insertion_point(field_mutable:protobuf.mapdata.MapAssets.topleft)
  return _internal_mutable_topleft();
}
inline void MapAssets::set_allocated_topleft(::protobuf::mapdata::Position* topleft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete topleft_;
  }
  if (topleft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(topleft);
    if (message_arena != submessage_arena) {
      topleft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topleft, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  topleft_ = topleft;
  // @@protoc_insertion_point(field_set_allocated:protobuf.mapdata.MapAssets.topleft)
}

// optional string filename = 3;
inline bool MapAssets::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MapAssets::has_filename() const {
  return _internal_has_filename();
}
inline void MapAssets::clear_filename() {
  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MapAssets::filename() const {
  // @@protoc_insertion_point(field_get:protobuf.mapdata.MapAssets.filename)
  return _internal_filename();
}
inline void MapAssets::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:protobuf.mapdata.MapAssets.filename)
}
inline std::string* MapAssets::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:protobuf.mapdata.MapAssets.filename)
  return _internal_mutable_filename();
}
inline const std::string& MapAssets::_internal_filename() const {
  return filename_.Get();
}
inline void MapAssets::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MapAssets::set_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.mapdata.MapAssets.filename)
}
inline void MapAssets::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.mapdata.MapAssets.filename)
}
inline void MapAssets::set_filename(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.mapdata.MapAssets.filename)
}
inline std::string* MapAssets::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  return filename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MapAssets::release_filename() {
  // @@protoc_insertion_point(field_release:protobuf.mapdata.MapAssets.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MapAssets::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.mapdata.MapAssets.filename)
}
inline std::string* MapAssets::unsafe_arena_release_filename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.mapdata.MapAssets.filename)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return filename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MapAssets::unsafe_arena_set_allocated_filename(
    std::string* filename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      filename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.mapdata.MapAssets.filename)
}

// optional uint32 widthsquare = 4;
inline bool MapAssets::_internal_has_widthsquare() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MapAssets::has_widthsquare() const {
  return _internal_has_widthsquare();
}
inline void MapAssets::clear_widthsquare() {
  widthsquare_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapAssets::_internal_widthsquare() const {
  return widthsquare_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapAssets::widthsquare() const {
  // @@protoc_insertion_point(field_get:protobuf.mapdata.MapAssets.widthsquare)
  return _internal_widthsquare();
}
inline void MapAssets::_internal_set_widthsquare(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  widthsquare_ = value;
}
inline void MapAssets::set_widthsquare(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_widthsquare(value);
  // @@protoc_insertion_point(field_set:protobuf.mapdata.MapAssets.widthsquare)
}

// optional uint32 heightsquare = 5;
inline bool MapAssets::_internal_has_heightsquare() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MapAssets::has_heightsquare() const {
  return _internal_has_heightsquare();
}
inline void MapAssets::clear_heightsquare() {
  heightsquare_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapAssets::_internal_heightsquare() const {
  return heightsquare_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapAssets::heightsquare() const {
  // @@protoc_insertion_point(field_get:protobuf.mapdata.MapAssets.heightsquare)
  return _internal_heightsquare();
}
inline void MapAssets::_internal_set_heightsquare(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  heightsquare_ = value;
}
inline void MapAssets::set_heightsquare(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_heightsquare(value);
  // @@protoc_insertion_point(field_set:protobuf.mapdata.MapAssets.heightsquare)
}

// optional uint32 areaid = 6;
inline bool MapAssets::_internal_has_areaid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MapAssets::has_areaid() const {
  return _internal_has_areaid();
}
inline void MapAssets::clear_areaid() {
  areaid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapAssets::_internal_areaid() const {
  return areaid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapAssets::areaid() const {
  // @@protoc_insertion_point(field_get:protobuf.mapdata.MapAssets.areaid)
  return _internal_areaid();
}
inline void MapAssets::_internal_set_areaid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  areaid_ = value;
}
inline void MapAssets::set_areaid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_areaid(value);
  // @@protoc_insertion_point(field_set:protobuf.mapdata.MapAssets.areaid)
}

// optional uint32 scale = 7;
inline bool MapAssets::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MapAssets::has_scale() const {
  return _internal_has_scale();
}
inline void MapAssets::clear_scale() {
  scale_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapAssets::_internal_scale() const {
  return scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapAssets::scale() const {
  // @@protoc_insertion_point(field_get:protobuf.mapdata.MapAssets.scale)
  return _internal_scale();
}
inline void MapAssets::_internal_set_scale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  scale_ = value;
}
inline void MapAssets::set_scale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:protobuf.mapdata.MapAssets.scale)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mapdata
}  // namespace protobuf

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protobuf::mapdata::AreaData_AreaType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::mapdata::AreaData_AreaType>() {
  return ::protobuf::mapdata::AreaData_AreaType_descriptor();
}
template <> struct is_proto_enum< ::protobuf::mapdata::MapAssets_AssetsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::mapdata::MapAssets_AssetsType>() {
  return ::protobuf::mapdata::MapAssets_AssetsType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_map_2eproto
