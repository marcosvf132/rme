// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: staticdata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_staticdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_staticdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_staticdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_staticdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_staticdata_2eproto;
namespace protobuf {
namespace housedata {
class House;
class HouseDefaultTypeInternal;
extern HouseDefaultTypeInternal _House_default_instance_;
class HouseData;
class HouseDataDefaultTypeInternal;
extern HouseDataDefaultTypeInternal _HouseData_default_instance_;
class HousePosition;
class HousePositionDefaultTypeInternal;
extern HousePositionDefaultTypeInternal _HousePosition_default_instance_;
}  // namespace housedata
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::protobuf::housedata::House* Arena::CreateMaybeMessage<::protobuf::housedata::House>(Arena*);
template<> ::protobuf::housedata::HouseData* Arena::CreateMaybeMessage<::protobuf::housedata::HouseData>(Arena*);
template<> ::protobuf::housedata::HousePosition* Arena::CreateMaybeMessage<::protobuf::housedata::HousePosition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf {
namespace housedata {

// ===================================================================

class HouseData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.housedata.HouseData) */ {
 public:
  inline HouseData() : HouseData(nullptr) {};
  virtual ~HouseData();

  HouseData(const HouseData& from);
  HouseData(HouseData&& from) noexcept
    : HouseData() {
    *this = ::std::move(from);
  }

  inline HouseData& operator=(const HouseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline HouseData& operator=(HouseData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HouseData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HouseData* internal_default_instance() {
    return reinterpret_cast<const HouseData*>(
               &_HouseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HouseData& a, HouseData& b) {
    a.Swap(&b);
  }
  inline void Swap(HouseData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HouseData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HouseData* New() const final {
    return CreateMaybeMessage<HouseData>(nullptr);
  }

  HouseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HouseData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HouseData& from);
  void MergeFrom(const HouseData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HouseData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.housedata.HouseData";
  }
  protected:
  explicit HouseData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_staticdata_2eproto);
    return ::descriptor_table_staticdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHouseFieldNumber = 3,
  };
  // repeated .protobuf.housedata.House house = 3;
  int house_size() const;
  private:
  int _internal_house_size() const;
  public:
  void clear_house();
  ::protobuf::housedata::House* mutable_house(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::housedata::House >*
      mutable_house();
  private:
  const ::protobuf::housedata::House& _internal_house(int index) const;
  ::protobuf::housedata::House* _internal_add_house();
  public:
  const ::protobuf::housedata::House& house(int index) const;
  ::protobuf::housedata::House* add_house();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::housedata::House >&
      house() const;

  // @@protoc_insertion_point(class_scope:protobuf.housedata.HouseData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::housedata::House > house_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_staticdata_2eproto;
};
// -------------------------------------------------------------------

class HousePosition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.housedata.HousePosition) */ {
 public:
  inline HousePosition() : HousePosition(nullptr) {};
  virtual ~HousePosition();

  HousePosition(const HousePosition& from);
  HousePosition(HousePosition&& from) noexcept
    : HousePosition() {
    *this = ::std::move(from);
  }

  inline HousePosition& operator=(const HousePosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline HousePosition& operator=(HousePosition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HousePosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HousePosition* internal_default_instance() {
    return reinterpret_cast<const HousePosition*>(
               &_HousePosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HousePosition& a, HousePosition& b) {
    a.Swap(&b);
  }
  inline void Swap(HousePosition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HousePosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HousePosition* New() const final {
    return CreateMaybeMessage<HousePosition>(nullptr);
  }

  HousePosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HousePosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HousePosition& from);
  void MergeFrom(const HousePosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HousePosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.housedata.HousePosition";
  }
  protected:
  explicit HousePosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_staticdata_2eproto);
    return ::descriptor_table_staticdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosXFieldNumber = 1,
    kPosYFieldNumber = 2,
    kPosZFieldNumber = 3,
  };
  // optional uint32 pos_x = 1;
  bool has_pos_x() const;
  private:
  bool _internal_has_pos_x() const;
  public:
  void clear_pos_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 pos_x() const;
  void set_pos_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pos_x() const;
  void _internal_set_pos_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pos_y = 2;
  bool has_pos_y() const;
  private:
  bool _internal_has_pos_y() const;
  public:
  void clear_pos_y();
  ::PROTOBUF_NAMESPACE_ID::uint32 pos_y() const;
  void set_pos_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pos_y() const;
  void _internal_set_pos_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pos_z = 3;
  bool has_pos_z() const;
  private:
  bool _internal_has_pos_z() const;
  public:
  void clear_pos_z();
  ::PROTOBUF_NAMESPACE_ID::uint32 pos_z() const;
  void set_pos_z(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pos_z() const;
  void _internal_set_pos_z(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.housedata.HousePosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pos_x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pos_y_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pos_z_;
  friend struct ::TableStruct_staticdata_2eproto;
};
// -------------------------------------------------------------------

class House PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.housedata.House) */ {
 public:
  inline House() : House(nullptr) {};
  virtual ~House();

  House(const House& from);
  House(House&& from) noexcept
    : House() {
    *this = ::std::move(from);
  }

  inline House& operator=(const House& from) {
    CopyFrom(from);
    return *this;
  }
  inline House& operator=(House&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const House& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const House* internal_default_instance() {
    return reinterpret_cast<const House*>(
               &_House_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(House& a, House& b) {
    a.Swap(&b);
  }
  inline void Swap(House* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(House* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline House* New() const final {
    return CreateMaybeMessage<House>(nullptr);
  }

  House* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<House>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const House& from);
  void MergeFrom(const House& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(House* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.housedata.House";
  }
  protected:
  explicit House(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_staticdata_2eproto);
    return ::descriptor_table_staticdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kUnknownstringFieldNumber = 3,
    kCityFieldNumber = 9,
    kHousePositionFieldNumber = 6,
    kHouseIdFieldNumber = 1,
    kPriceFieldNumber = 4,
    kBedsFieldNumber = 5,
    kSizeSqmFieldNumber = 7,
    kGuildhallFieldNumber = 8,
    kShopFieldNumber = 10,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string unknownstring = 3;
  bool has_unknownstring() const;
  private:
  bool _internal_has_unknownstring() const;
  public:
  void clear_unknownstring();
  const std::string& unknownstring() const;
  void set_unknownstring(const std::string& value);
  void set_unknownstring(std::string&& value);
  void set_unknownstring(const char* value);
  void set_unknownstring(const char* value, size_t size);
  std::string* mutable_unknownstring();
  std::string* release_unknownstring();
  void set_allocated_unknownstring(std::string* unknownstring);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_unknownstring();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_unknownstring(
      std::string* unknownstring);
  private:
  const std::string& _internal_unknownstring() const;
  void _internal_set_unknownstring(const std::string& value);
  std::string* _internal_mutable_unknownstring();
  public:

  // optional string city = 9;
  bool has_city() const;
  private:
  bool _internal_has_city() const;
  public:
  void clear_city();
  const std::string& city() const;
  void set_city(const std::string& value);
  void set_city(std::string&& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  std::string* mutable_city();
  std::string* release_city();
  void set_allocated_city(std::string* city);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_city();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_city(
      std::string* city);
  private:
  const std::string& _internal_city() const;
  void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // optional .protobuf.housedata.HousePosition housePosition = 6;
  bool has_houseposition() const;
  private:
  bool _internal_has_houseposition() const;
  public:
  void clear_houseposition();
  const ::protobuf::housedata::HousePosition& houseposition() const;
  ::protobuf::housedata::HousePosition* release_houseposition();
  ::protobuf::housedata::HousePosition* mutable_houseposition();
  void set_allocated_houseposition(::protobuf::housedata::HousePosition* houseposition);
  private:
  const ::protobuf::housedata::HousePosition& _internal_houseposition() const;
  ::protobuf::housedata::HousePosition* _internal_mutable_houseposition();
  public:
  void unsafe_arena_set_allocated_houseposition(
      ::protobuf::housedata::HousePosition* houseposition);
  ::protobuf::housedata::HousePosition* unsafe_arena_release_houseposition();

  // optional uint32 house_id = 1;
  bool has_house_id() const;
  private:
  bool _internal_has_house_id() const;
  public:
  void clear_house_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 house_id() const;
  void set_house_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_house_id() const;
  void _internal_set_house_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 price = 4;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 beds = 5;
  bool has_beds() const;
  private:
  bool _internal_has_beds() const;
  public:
  void clear_beds();
  ::PROTOBUF_NAMESPACE_ID::uint32 beds() const;
  void set_beds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_beds() const;
  void _internal_set_beds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 size_sqm = 7;
  bool has_size_sqm() const;
  private:
  bool _internal_has_size_sqm() const;
  public:
  void clear_size_sqm();
  ::PROTOBUF_NAMESPACE_ID::uint32 size_sqm() const;
  void set_size_sqm(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size_sqm() const;
  void _internal_set_size_sqm(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool guildhall = 8;
  bool has_guildhall() const;
  private:
  bool _internal_has_guildhall() const;
  public:
  void clear_guildhall();
  bool guildhall() const;
  void set_guildhall(bool value);
  private:
  bool _internal_guildhall() const;
  void _internal_set_guildhall(bool value);
  public:

  // optional bool shop = 10;
  bool has_shop() const;
  private:
  bool _internal_has_shop() const;
  public:
  void clear_shop();
  bool shop() const;
  void set_shop(bool value);
  private:
  bool _internal_shop() const;
  void _internal_set_shop(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.housedata.House)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unknownstring_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::protobuf::housedata::HousePosition* houseposition_;
  ::PROTOBUF_NAMESPACE_ID::uint32 house_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 price_;
  ::PROTOBUF_NAMESPACE_ID::uint32 beds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_sqm_;
  bool guildhall_;
  bool shop_;
  friend struct ::TableStruct_staticdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HouseData

// repeated .protobuf.housedata.House house = 3;
inline int HouseData::_internal_house_size() const {
  return house_.size();
}
inline int HouseData::house_size() const {
  return _internal_house_size();
}
inline void HouseData::clear_house() {
  house_.Clear();
}
inline ::protobuf::housedata::House* HouseData::mutable_house(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.housedata.HouseData.house)
  return house_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::housedata::House >*
HouseData::mutable_house() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.housedata.HouseData.house)
  return &house_;
}
inline const ::protobuf::housedata::House& HouseData::_internal_house(int index) const {
  return house_.Get(index);
}
inline const ::protobuf::housedata::House& HouseData::house(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.housedata.HouseData.house)
  return _internal_house(index);
}
inline ::protobuf::housedata::House* HouseData::_internal_add_house() {
  return house_.Add();
}
inline ::protobuf::housedata::House* HouseData::add_house() {
  // @@protoc_insertion_point(field_add:protobuf.housedata.HouseData.house)
  return _internal_add_house();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::housedata::House >&
HouseData::house() const {
  // @@protoc_insertion_point(field_list:protobuf.housedata.HouseData.house)
  return house_;
}

// -------------------------------------------------------------------

// HousePosition

// optional uint32 pos_x = 1;
inline bool HousePosition::_internal_has_pos_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HousePosition::has_pos_x() const {
  return _internal_has_pos_x();
}
inline void HousePosition::clear_pos_x() {
  pos_x_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HousePosition::_internal_pos_x() const {
  return pos_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HousePosition::pos_x() const {
  // @@protoc_insertion_point(field_get:protobuf.housedata.HousePosition.pos_x)
  return _internal_pos_x();
}
inline void HousePosition::_internal_set_pos_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  pos_x_ = value;
}
inline void HousePosition::set_pos_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:protobuf.housedata.HousePosition.pos_x)
}

// optional uint32 pos_y = 2;
inline bool HousePosition::_internal_has_pos_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HousePosition::has_pos_y() const {
  return _internal_has_pos_y();
}
inline void HousePosition::clear_pos_y() {
  pos_y_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HousePosition::_internal_pos_y() const {
  return pos_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HousePosition::pos_y() const {
  // @@protoc_insertion_point(field_get:protobuf.housedata.HousePosition.pos_y)
  return _internal_pos_y();
}
inline void HousePosition::_internal_set_pos_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  pos_y_ = value;
}
inline void HousePosition::set_pos_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:protobuf.housedata.HousePosition.pos_y)
}

// optional uint32 pos_z = 3;
inline bool HousePosition::_internal_has_pos_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HousePosition::has_pos_z() const {
  return _internal_has_pos_z();
}
inline void HousePosition::clear_pos_z() {
  pos_z_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HousePosition::_internal_pos_z() const {
  return pos_z_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HousePosition::pos_z() const {
  // @@protoc_insertion_point(field_get:protobuf.housedata.HousePosition.pos_z)
  return _internal_pos_z();
}
inline void HousePosition::_internal_set_pos_z(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  pos_z_ = value;
}
inline void HousePosition::set_pos_z(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pos_z(value);
  // @@protoc_insertion_point(field_set:protobuf.housedata.HousePosition.pos_z)
}

// -------------------------------------------------------------------

// House

// optional uint32 house_id = 1;
inline bool House::_internal_has_house_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool House::has_house_id() const {
  return _internal_has_house_id();
}
inline void House::clear_house_id() {
  house_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 House::_internal_house_id() const {
  return house_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 House::house_id() const {
  // @@protoc_insertion_point(field_get:protobuf.housedata.House.house_id)
  return _internal_house_id();
}
inline void House::_internal_set_house_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  house_id_ = value;
}
inline void House::set_house_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_house_id(value);
  // @@protoc_insertion_point(field_set:protobuf.housedata.House.house_id)
}

// optional string name = 2;
inline bool House::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool House::has_name() const {
  return _internal_has_name();
}
inline void House::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& House::name() const {
  // @@protoc_insertion_point(field_get:protobuf.housedata.House.name)
  return _internal_name();
}
inline void House::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:protobuf.housedata.House.name)
}
inline std::string* House::mutable_name() {
  // @@protoc_insertion_point(field_mutable:protobuf.housedata.House.name)
  return _internal_mutable_name();
}
inline const std::string& House::_internal_name() const {
  return name_.Get();
}
inline void House::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void House::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.housedata.House.name)
}
inline void House::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.housedata.House.name)
}
inline void House::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.housedata.House.name)
}
inline std::string* House::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* House::release_name() {
  // @@protoc_insertion_point(field_release:protobuf.housedata.House.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void House::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.housedata.House.name)
}
inline std::string* House::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.housedata.House.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void House::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.housedata.House.name)
}

// optional string unknownstring = 3;
inline bool House::_internal_has_unknownstring() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool House::has_unknownstring() const {
  return _internal_has_unknownstring();
}
inline void House::clear_unknownstring() {
  unknownstring_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& House::unknownstring() const {
  // @@protoc_insertion_point(field_get:protobuf.housedata.House.unknownstring)
  return _internal_unknownstring();
}
inline void House::set_unknownstring(const std::string& value) {
  _internal_set_unknownstring(value);
  // @@protoc_insertion_point(field_set:protobuf.housedata.House.unknownstring)
}
inline std::string* House::mutable_unknownstring() {
  // @@protoc_insertion_point(field_mutable:protobuf.housedata.House.unknownstring)
  return _internal_mutable_unknownstring();
}
inline const std::string& House::_internal_unknownstring() const {
  return unknownstring_.Get();
}
inline void House::_internal_set_unknownstring(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  unknownstring_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void House::set_unknownstring(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  unknownstring_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.housedata.House.unknownstring)
}
inline void House::set_unknownstring(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  unknownstring_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.housedata.House.unknownstring)
}
inline void House::set_unknownstring(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  unknownstring_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.housedata.House.unknownstring)
}
inline std::string* House::_internal_mutable_unknownstring() {
  _has_bits_[0] |= 0x00000002u;
  return unknownstring_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* House::release_unknownstring() {
  // @@protoc_insertion_point(field_release:protobuf.housedata.House.unknownstring)
  if (!_internal_has_unknownstring()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return unknownstring_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void House::set_allocated_unknownstring(std::string* unknownstring) {
  if (unknownstring != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  unknownstring_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unknownstring,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.housedata.House.unknownstring)
}
inline std::string* House::unsafe_arena_release_unknownstring() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.housedata.House.unknownstring)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return unknownstring_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void House::unsafe_arena_set_allocated_unknownstring(
    std::string* unknownstring) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (unknownstring != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  unknownstring_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      unknownstring, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.housedata.House.unknownstring)
}

// optional uint32 price = 4;
inline bool House::_internal_has_price() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool House::has_price() const {
  return _internal_has_price();
}
inline void House::clear_price() {
  price_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 House::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 House::price() const {
  // @@protoc_insertion_point(field_get:protobuf.housedata.House.price)
  return _internal_price();
}
inline void House::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  price_ = value;
}
inline void House::set_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:protobuf.housedata.House.price)
}

// optional uint32 beds = 5;
inline bool House::_internal_has_beds() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool House::has_beds() const {
  return _internal_has_beds();
}
inline void House::clear_beds() {
  beds_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 House::_internal_beds() const {
  return beds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 House::beds() const {
  // @@protoc_insertion_point(field_get:protobuf.housedata.House.beds)
  return _internal_beds();
}
inline void House::_internal_set_beds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  beds_ = value;
}
inline void House::set_beds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_beds(value);
  // @@protoc_insertion_point(field_set:protobuf.housedata.House.beds)
}

// optional .protobuf.housedata.HousePosition housePosition = 6;
inline bool House::_internal_has_houseposition() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || houseposition_ != nullptr);
  return value;
}
inline bool House::has_houseposition() const {
  return _internal_has_houseposition();
}
inline void House::clear_houseposition() {
  if (houseposition_ != nullptr) houseposition_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::protobuf::housedata::HousePosition& House::_internal_houseposition() const {
  const ::protobuf::housedata::HousePosition* p = houseposition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf::housedata::HousePosition*>(
      &::protobuf::housedata::_HousePosition_default_instance_);
}
inline const ::protobuf::housedata::HousePosition& House::houseposition() const {
  // @@protoc_insertion_point(field_get:protobuf.housedata.House.housePosition)
  return _internal_houseposition();
}
inline void House::unsafe_arena_set_allocated_houseposition(
    ::protobuf::housedata::HousePosition* houseposition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(houseposition_);
  }
  houseposition_ = houseposition;
  if (houseposition) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.housedata.House.housePosition)
}
inline ::protobuf::housedata::HousePosition* House::release_houseposition() {
  auto temp = unsafe_arena_release_houseposition();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protobuf::housedata::HousePosition* House::unsafe_arena_release_houseposition() {
  // @@protoc_insertion_point(field_release:protobuf.housedata.House.housePosition)
  _has_bits_[0] &= ~0x00000008u;
  ::protobuf::housedata::HousePosition* temp = houseposition_;
  houseposition_ = nullptr;
  return temp;
}
inline ::protobuf::housedata::HousePosition* House::_internal_mutable_houseposition() {
  _has_bits_[0] |= 0x00000008u;
  if (houseposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::housedata::HousePosition>(GetArena());
    houseposition_ = p;
  }
  return houseposition_;
}
inline ::protobuf::housedata::HousePosition* House::mutable_houseposition() {
  // @@protoc_insertion_point(field_mutable:protobuf.housedata.House.housePosition)
  return _internal_mutable_houseposition();
}
inline void House::set_allocated_houseposition(::protobuf::housedata::HousePosition* houseposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete houseposition_;
  }
  if (houseposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(houseposition);
    if (message_arena != submessage_arena) {
      houseposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, houseposition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  houseposition_ = houseposition;
  // @@protoc_insertion_point(field_set_allocated:protobuf.housedata.House.housePosition)
}

// optional uint32 size_sqm = 7;
inline bool House::_internal_has_size_sqm() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool House::has_size_sqm() const {
  return _internal_has_size_sqm();
}
inline void House::clear_size_sqm() {
  size_sqm_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 House::_internal_size_sqm() const {
  return size_sqm_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 House::size_sqm() const {
  // @@protoc_insertion_point(field_get:protobuf.housedata.House.size_sqm)
  return _internal_size_sqm();
}
inline void House::_internal_set_size_sqm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  size_sqm_ = value;
}
inline void House::set_size_sqm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size_sqm(value);
  // @@protoc_insertion_point(field_set:protobuf.housedata.House.size_sqm)
}

// optional bool guildhall = 8;
inline bool House::_internal_has_guildhall() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool House::has_guildhall() const {
  return _internal_has_guildhall();
}
inline void House::clear_guildhall() {
  guildhall_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool House::_internal_guildhall() const {
  return guildhall_;
}
inline bool House::guildhall() const {
  // @@protoc_insertion_point(field_get:protobuf.housedata.House.guildhall)
  return _internal_guildhall();
}
inline void House::_internal_set_guildhall(bool value) {
  _has_bits_[0] |= 0x00000100u;
  guildhall_ = value;
}
inline void House::set_guildhall(bool value) {
  _internal_set_guildhall(value);
  // @@protoc_insertion_point(field_set:protobuf.housedata.House.guildhall)
}

// optional string city = 9;
inline bool House::_internal_has_city() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool House::has_city() const {
  return _internal_has_city();
}
inline void House::clear_city() {
  city_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& House::city() const {
  // @@protoc_insertion_point(field_get:protobuf.housedata.House.city)
  return _internal_city();
}
inline void House::set_city(const std::string& value) {
  _internal_set_city(value);
  // @@protoc_insertion_point(field_set:protobuf.housedata.House.city)
}
inline std::string* House::mutable_city() {
  // @@protoc_insertion_point(field_mutable:protobuf.housedata.House.city)
  return _internal_mutable_city();
}
inline const std::string& House::_internal_city() const {
  return city_.Get();
}
inline void House::_internal_set_city(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void House::set_city(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  city_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.housedata.House.city)
}
inline void House::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.housedata.House.city)
}
inline void House::set_city(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.housedata.House.city)
}
inline std::string* House::_internal_mutable_city() {
  _has_bits_[0] |= 0x00000004u;
  return city_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* House::release_city() {
  // @@protoc_insertion_point(field_release:protobuf.housedata.House.city)
  if (!_internal_has_city()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return city_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void House::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  city_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.housedata.House.city)
}
inline std::string* House::unsafe_arena_release_city() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.housedata.House.city)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return city_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void House::unsafe_arena_set_allocated_city(
    std::string* city) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (city != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  city_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      city, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.housedata.House.city)
}

// optional bool shop = 10;
inline bool House::_internal_has_shop() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool House::has_shop() const {
  return _internal_has_shop();
}
inline void House::clear_shop() {
  shop_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool House::_internal_shop() const {
  return shop_;
}
inline bool House::shop() const {
  // @@protoc_insertion_point(field_get:protobuf.housedata.House.shop)
  return _internal_shop();
}
inline void House::_internal_set_shop(bool value) {
  _has_bits_[0] |= 0x00000200u;
  shop_ = value;
}
inline void House::set_shop(bool value) {
  _internal_set_shop(value);
  // @@protoc_insertion_point(field_set:protobuf.housedata.House.shop)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace housedata
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_staticdata_2eproto
